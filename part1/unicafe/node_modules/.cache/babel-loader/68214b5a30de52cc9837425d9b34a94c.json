{"ast":null,"code":"import _slicedToArray from \"/Volumes/mydrive/fullstackopen2019/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/mydrive/fullstackopen2019/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"statistics\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"good \", good), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"neutral \", neutral), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"bad \", bad), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"all \", good + neutral + bad), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"average \", (good + 0 * neutral + -1 * bad) / (good + neutral + bad), \"}\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"positive \", good * 100 / (good + neutral + bad)));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(\"button\", {\n    onClick: () => {\n      setGood(good + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \" good \"), React.createElement(\"button\", {\n    onClick: () => {\n      setNeutral(neutral + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \" neutral \"), React.createElement(\"button\", {\n    onClick: () => {\n      setBad(bad + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \" bad \"), React.createElement(Statistics, {\n    clicks: {\n      good,\n      neutral,\n      bad\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Volumes/mydrive/fullstackopen2019/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistics","good","neutral","bad","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,UAAU,GAAC,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,OAAN;AAAcC,EAAAA;AAAd,CAAD,KAAsB;AACnC,SACI,0CACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADE,EAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASF,IAAT,CAFE,EAGF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYC,OAAZ,CAHE,EAIF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQC,GAAR,CAJE,EAKF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQF,IAAI,GAACC,OAAL,GAAaC,GAArB,CALE,EAMF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAY,CAACF,IAAI,GAAC,IAAEC,OAAP,GAAe,CAAC,CAAD,GAAGC,GAAnB,KAAyBF,IAAI,GAACC,OAAL,GAAaC,GAAtC,CAAZ,MANE,EAOF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaF,IAAI,GAAC,GAAL,IAAUA,IAAI,GAACC,OAAL,GAAaC,GAAvB,CAAb,CAPE,CADJ;AAYH,CAbD;;AAeA,MAAMC,GAAG,GAAG,MAAM;AAChB;AADgB,oBAEQN,QAAQ,CAAC,CAAD,CAFhB;AAAA;AAAA,QAETG,IAFS;AAAA,QAEHI,OAFG;;AAAA,qBAGcP,QAAQ,CAAC,CAAD,CAHtB;AAAA;AAAA,QAGTI,OAHS;AAAA,QAGAI,UAHA;;AAAA,qBAIMR,QAAQ,CAAC,CAAD,CAJd;AAAA;AAAA,QAITK,GAJS;AAAA,QAIJI,MAJI;;AAMhB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACF,MAAAA,OAAO,CAACJ,IAAI,GAAC,CAAN,CAAP;AAAgB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGE;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACK,MAAAA,UAAU,CAACJ,OAAO,GAAC,CAAT,CAAV;AAAsB,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAIE;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACK,MAAAA,MAAM,CAACJ,GAAG,GAAC,CAAL,CAAN;AAAc,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,EAKE,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAE;AAACF,MAAAA,IAAD;AAAMC,MAAAA,OAAN;AAAcC,MAAAA;AAAd,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CAfD;;AAiBAJ,QAAQ,CAACS,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EACEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADF","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistics=({good,neutral,bad})=>{\n    return (\n        <>\n      <h1>statistics</h1>\n      <p>good {good}</p>\n      <p>neutral {neutral}</p>\n      <p>bad {bad}</p>\n      <p>all {good+neutral+bad}</p>\n      <p>average {(good+0*neutral+-1*bad)/(good+neutral+bad)}}</p>\n      <p>positive {good*100/(good+neutral+bad)}</p>\n      </>\n    )\n\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <button onClick={()=>{setGood(good+1)}}> good </button>\n      <button onClick={()=>{setNeutral(neutral+1)}}> neutral </button>\n      <button onClick={()=>{setBad(bad+1)}}> bad </button>\n      <Statistics clicks={{good,neutral,bad}}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}