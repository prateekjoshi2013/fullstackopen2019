{"ast":null,"code":"import _slicedToArray from \"/Volumes/mydrive/fullstackopen2019/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/mydrive/fullstackopen2019/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistics = ({\n  clicks\n}) => {\n  const good = clicks.good,\n        neutral = clicks.neutral,\n        bad = clicks.bad;\n\n  if (!(good + bad + neutral)) {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"statistics\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, \"No feedback given\"));\n  } else {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"statistics\"), React.createElement(Statistic, {\n      clicks: {\n        text: \"good\",\n        clicks: good\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      clicks: {\n        text: \"neutral\",\n        clicks: neutral\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      clicks: {\n        text: \"bad\",\n        clicks: bad\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      clicks: {\n        text: \"all\",\n        clicks: good + neutral + bad\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      clicks: {\n        text: \"average\",\n        clicks: (good + 0 * neutral + -1 * bad) / (good + neutral + bad)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      clicks: {\n        text: \"positive\",\n        clicks: good * 100 / (good + neutral + bad)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }));\n  }\n};\n\nconst Statistic = ({\n  clicksDetail\n}) => {\n  const text = clicksDetail.text,\n        clicks = clicksDetail.clicks;\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, text, \" \", clicks);\n};\n\nconst Button = ({\n  clickDetails\n}) => {\n  const text = clickDetails.text,\n        click = clickDetails.click,\n        clickHandler = clickDetails.clickHandler;\n  console.log(clickHandler);\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => {\n      clickHandler(click + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, text));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Button, {\n    clickDetails: {\n      text: \"good\",\n      click: good,\n      clickHandler: setGood\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Button, {\n    clickDetails: {\n      text: \"neutral\",\n      click: neutral,\n      clickHandler: setNeutral\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Button, {\n    clickDetails: {\n      text: \"bad\",\n      click: bad,\n      clickHandler: setBad\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    clicks: {\n      good,\n      neutral,\n      bad\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Volumes/mydrive/fullstackopen2019/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistics","clicks","good","neutral","bad","text","Statistic","clicksDetail","Button","clickDetails","click","clickHandler","console","log","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistics=({clicks})=>{\n   \n    const {good,neutral,bad}=clicks\n    if(!(good+bad+neutral)){\n        return (<>\n        <h1>statistics</h1>\n        <p>No feedback given</p>\n        </>)\n    }else{\n        return (\n            <>\n          <h1>statistics</h1>\n          <Statistic clicks={{text:\"good\",clicks:good}}/>\n          <Statistic clicks={{text:\"neutral\",clicks:neutral}}/>\n          <Statistic clicks={{text:\"bad\",clicks:bad}}/>\n          <Statistic clicks={{text:\"all\",clicks:(good+neutral+bad)}}/>\n          <Statistic clicks={{text:\"average\",clicks:(good+0*neutral+-1*bad)/(good+neutral+bad)}}/>\n          <Statistic clicks={{text:\"positive\",clicks:good*100/(good+neutral+bad)}}/>\n          </>\n        )\n    }\n}\n\nconst Statistic =({clicksDetail})=>{\n    const {text,clicks}=clicksDetail\n   return  <p>{text} {clicks}</p> \n} \n\nconst Button = ({clickDetails}) =>{\n const {text,click,clickHandler}=clickDetails\n console.log(clickHandler)\n return (<><button onClick={()=>{ clickHandler(click+1) }}>{text}</button></>)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button clickDetails={{text:\"good\",click:good,clickHandler:setGood}}/>\n      <Button clickDetails={{text:\"neutral\",click:neutral,clickHandler:setNeutral}}/>\n      <Button clickDetails={{text:\"bad\",click:bad,clickHandler:setBad}}/>\n      <Statistics clicks={{good,neutral,bad}}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}